# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QGYFDockWidget
                                 A QGIS plugin
 Green Space Factor
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-01
        git sha              : $Format:%H$
        copyright            : (C) 2019 by C/O City
        email                : info@cocity.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import QtGui, QtWidgets, uic
from PyQt5.QtCore import pyqtSignal
from qgis.core import QgsProject, QgsVectorLayer
from qgis.utils import iface
from qgis.utils import spatialite_connect
from .saveResearchArea import saveRA
 

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qgyf_dockwidget_base.ui'))


class QGYFDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(QGYFDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

        """ Functions to classify input data"""    
    
    # CLASSIFICATION
    def chooseQ(self, path):
        self.selectQGroup.clear()
        con = spatialite_connect(path + r'\qgyf.sqlite')
        cur = con.cursor()

        self.textQ.clear()
        self.selectQ.clear()
        cur.execute('''SELECT grupp FROM gyf_qgroup''')
        items = [''] + [i[0] for i in cur.fetchall()]
        self.selectQGroup.addItems(items)
        
        cur.close()
        con.close()

    def getQ(self, path):
        self.selectQ.clear()
        self.textQ.clear()

        con = spatialite_connect(path + r'\qgyf.sqlite')
        cur = con.cursor()
        
        i = str(self.selectQGroup.currentIndex())
        cur.execute('SELECT kvalitet FROM gyf_quality WHERE grupp_id = ' + i)
        quality = [j[0] for j in cur.fetchall()]
        quality = quality + ['Vet inte']
        self.selectQ.addItems(quality)

        cur.close()
        con.close()
        
    def getF(self, path):
        self.textQ.clear()
        con = spatialite_connect(path + r'\qgyf.sqlite')
        cur = con.cursor()

        if self.selectQ.count() > 0:
            if self.selectQ.currentText() != 'Vet inte':
                q = [self.selectQ.currentText()]
                cur.execute('SELECT faktor,namn FROM gyf_quality WHERE kvalitet = ?', q)
                text = cur.fetchone()
                t = text[1] + ', faktor = ' + str(text[0])
                self.textQ.append(t)
            else:
                i = [self.selectQGroup.currentIndex()]
                cur.execute('SELECT faktor FROM gyf_qgroup WHERE id = ?', i)
                text = '<b>Ungerfärligt beräkningsläge för GYF:en!</b><br>' + \
                    self.selectQGroup.currentText() + ', grov faktor = ' + str(cur.fetchone()[0])
                self.textQ.append(text)

        cur.close()
        con.close()

    def setLayers(self):
        self.selectLayer.clear()
        items = ['', 'punkt', 'linje', 'yta']
        self.selectLayer.addItems(items)
            
    def selectStart(self):
        # Start object selection for QGYF
        for a in iface.attributesToolBar().actions(): 
            if a.objectName() == 'mActionDeselectAll':
                a.trigger()
                break

        iface.actionSelect().trigger()

        def lyr(x):
            return {'punkt': 'point_object',
                    'linje': 'line_object'}.get(x, 'polygon_object')
                    
        l = QgsProject.instance().mapLayersByName(lyr(self.selectLayer.currentText()))[0]
        iface.setActiveLayer(l)

    def setQ(self, path):
        con = spatialite_connect(path + r'\qgyf.sqlite')
        cur = con.cursor()

        layer = iface.activeLayer()
        selected = layer.selectedFeatures()
        attributes = []
        if selected:
            for f in selected:
                attributes.append(f.attributes())
        
        g = self.selectQGroup.currentText()
        geom = self.selectLayer.currentText()

        if self.selectQ.currentText() != 'Vet inte':
            q = self.selectQ.currentText()
            cur.execute('SELECT faktor FROM gyf_quality WHERE kvalitet = ?', [q])
        else:
            q = ''
            i = [self.selectQGroup.currentIndex()]
            cur.execute('SELECT faktor FROM gyf_qgroup WHERE id = ?', i)
        f = cur.fetchone()[0]

        cur.execute('SELECT count(id) FROM classification')
        n = cur.fetchone()[0]
        
        data = []
        for i,obj in enumerate(attributes):
            data.append([n+i, geom, obj[1], obj[0], g, q, f])
        
        cur.executemany('INSERT INTO classification VALUES (?,?,?,?,?,?,?)', data)
        cur.close()
        con.commit()
        con.close()

    def showClass(self, path):
        self.classtable.clear()
        con = spatialite_connect(path + r'\qgyf.sqlite')
        cur = con.cursor()

        cur.execute('SELECT * FROM classification')
        data = cur.fetchall()
        data = [d[1:] for d in data]
        
        if data:
            self.classtable.setRowCount(len(data))
            self.classtable.setColumnCount(len(data[0]))
            self.classtable.setHorizontalHeaderLabels(["geom", "fil namn", 'id', 'Grupp', 'K', 'F'])
            for i, item in enumerate(data):
                for j, field in enumerate(item):
                    self.classtable.setItem(i, j, QtWidgets.QTableWidgetItem(str(field)))
                    self.classtable.horizontalHeader().setSectionResizeMode(j, QtWidgets.QHeaderView.ResizeToContents)

        cur.close()
        con.close()


    #RESEARCH_AREA
    def okClicked(self, l, path):
            print('I see you!')
            l.commitChanges()
            iface.vectorLayerTools().stopEditing(l)
            con = spatialite_connect(path + r'\qgyf.sqlite')
            con.commit()
            con.close()
            self.window.close()

    def cancelClicked(self, l):
            f = [f for f in l.getFeatures()][0]
            print(f.id())
            l.deleteFeature(f.id())
            l.triggerRepaint()
            iface.vectorLayerTools().stopEditing(l)
            self.window.close()

    def showSaveDialog(self, l, path):
            self.window = saveRA()
            self.window.show()
            ok = lambda : self.okClicked(l, path)
            cancel = lambda : self.cancelClicked(l)
            self.window.okButton.clicked.connect(ok)
            self.window.cancelButton.clicked.connect(cancel)

    def createArea(self, path):
        l = QgsProject.instance().mapLayersByName('research_area')
        if l:
            l = l[0]
            iface.setActiveLayer(l)
            iface.actionToggleEditing().trigger()
            iface.actionAddFeature().trigger()
            showSave = lambda : self.showSaveDialog(l, path)
            l.featureAdded.connect(showSave)

    def selectArea(self):
        for a in iface.attributesToolBar().actions():
            if a.objectName() == 'mActionDeselectAll':
                a.trigger()
                break

        l = QgsProject.instance().mapLayersByName('research_area')
        if l:
            l = l[0]
            iface.setActiveLayer(l)
            iface.actionSelect().trigger()


    # Visualization
    def checkGroup(self, checkboxnames, checkbox):
        checkbox_list = []
        for n in checkboxnames:
            checkbox_list.append(getattr(self, n))
        
        view = QgsProject.instance().mapLayersByName('ytor_klassade')
        if view:
            view = view[0]
            if not checkbox.isChecked():
                print('Not checked')
                view.setSubsetString('"%s" != \'%s\'' % ('grupp', checkbox.text()))
            else:
                print('Checked, lets try!')
                checkbox_list = [c for c in checkbox_list if not c.isChecked()]
                print(checkbox_list)
                view.setSubsetString('')
                for c in checkbox_list:
                    view.setSubsetString('"%s" != \'%s\'' % ('grupp', c.text()))
            
            
    def groupList(self):
        checkboxnames = ['checkBio', 'checkBuller', 'checkVatten', 'checkKlimat', 'checkPoll', 'checkHalsa']
        checkGroup = lambda : self.checkGroup(checkboxnames, checkbox)
        for n in checkboxnames:
            checkbox = getattr(self, n)
            checkbox.setChecked(True)
            checkbox.stateChanged.connect(checkGroup)