# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QGYFDockWidget
                                 A QGIS plugin
 Green Space Factor
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-01
        git sha              : $Format:%H$
        copyright            : (C) 2019 by C/O City
        email                : info@cocity.se
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import threading
from PyQt5 import QtGui, QtWidgets, uic
from PyQt5.QtCore import QSettings, pyqtSignal, Qt
from qgis.core import QgsProject, QgsVectorLayer, QgsFeatureRequest, QgsWkbTypes
from qgis.utils import iface, spatialite_connect
from .saveResearchArea import saveRA
from ..lib.styles import Style
from .mplwidget import MplWidget
from functools import wraps

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'qgyf_dockwidget_base.ui'))

def delay(delay=0.):
    """
    Decorator delaying the execution of a function for a while.
    """
    def wrap(f):
        @wraps(f)
        def delayed(*args, **kwargs):
            timer = threading.Timer(delay, f, args=args, kwargs=kwargs)
            timer.start()
        return delayed
    return wrap

class Timer():

    toClearTimer = False

    def setTimeout(self, fn, time):
        isInvokationCancelled = False
        @delay(time)
        def some_fn():
            if (self.toClearTimer is False):
                fn()
            else:
                print('Invokation is cleared!')
        some_fn()
        return isInvokationCancelled

    def setClearTimer(self):
        self.toClearTimer = True

class QGYFDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(QGYFDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.feature_selection_lock = False
        self.row_selection_lock = False

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

        """ Functions to classify input data"""

    # CLASSIFICATION
    def chooseQ(self, path):
        self.selectQGroup.clear()
        con = spatialite_connect("{}\{}".format(path, QSettings().value('activeDataBase')))
        cur = con.cursor()

        self.textQ.clear()
        self.selectQ.clear()
        cur.execute('''SELECT grupp FROM gyf_qgroup''')
        items = [''] + [i[0] for i in cur.fetchall()]
        self.selectQGroup.addItems(items)

        cur.close()
        con.close()

    def getQ(self, path):
        self.selectQ.clear()
        self.textQ.clear()
        con = spatialite_connect("{}\{}".format(path, QSettings().value('activeDataBase')))
        cur = con.cursor()

        i = str(self.selectQGroup.currentIndex())
        cur.execute('SELECT kvalitet, kort_namn FROM gyf_quality WHERE grupp_id = ' + i)
        quality = [j[0] + ' - ' + j[1] for j in cur.fetchall()]
        quality = quality + ['Vet inte']
        self.selectQ.addItems(quality)

        cur.close()
        con.close()

    def getF(self, path):

        if self.selectQGroup.currentIndex() == 0:
            return None

        self.textQ.clear()
        con = spatialite_connect("{}\{}".format(path, QSettings().value('activeDataBase')))
        cur = con.cursor()

        if self.selectQ.count() > 0:
            if self.selectQ.currentText() != 'Vet inte':
                q = self.selectQ.currentText()
                q = q.split(' ')[0]
                cur.execute('SELECT faktor,namn,beskrivning FROM gyf_quality WHERE kvalitet = ?', [q])
                text = cur.fetchone()
                t = '<h4 style="color:#238973">' + text[1] + '</h4>'+ text[2] +'<p style="color:#238973">faktor = ' + str(text[0]) + '</p>'
                self.textQ.append(t)
            else:
                if self.selectQGroup.currentText():
                    i = [self.selectQGroup.currentIndex()]
                    cur.execute('SELECT faktor FROM gyf_qgroup WHERE id = ?', i)
                    text = '<p style="color:#cc0000">OBS! Ungerfärligt beräkningsläge för GYF:en!</p><h4 style="color:#238973">' + \
                        self.selectQGroup.currentText() + '</h4>grov faktor = ' + str(cur.fetchone()[0])
                    self.textQ.append(text)

        cur.close()
        con.close()

    def setLayers(self):
        self.selectLayer.clear()
        items = ['', 'punkt', 'linje', 'yta']
        self.selectLayer.addItems(items)

    def selectStart(self):
        # Start object selection for QGYF
        for a in iface.attributesToolBar().actions():
            if a.objectName() == 'mActionDeselectAll':
                a.trigger()
                break

        iface.actionSelect().trigger()

        def lyr(x):
            return {
                'punkt': 'Punktobjekt',
                'linje': 'Linjeobjekt'
            }.get(x, 'Ytobjekt')

        l = QgsProject.instance().mapLayersByName(lyr(self.selectLayer.currentText()))[0]
        iface.setActiveLayer(l)

    def setQ(self):

        path = QSettings().value('dataPath')

        layer = iface.activeLayer()
        selected = layer.selectedFeatures()
        if self.selectQGroup.currentIndex() == 0:
            return None

        attributes = []
        if selected:
            for f in selected:
                if layer.wkbType() == QgsWkbTypes.Point:
                    attributes.append(f.attributes() + [25.0])
                elif layer.wkbType() == QgsWkbTypes.LineString:
                    attributes.append(f.attributes() + [round(f.geometry().length(), 1)])
                else:
                    attributes.append(f.attributes() + [round(f.geometry().area(), 1)])

        g = self.selectQGroup.currentText()
        def set_geom(x):
            return {QgsWkbTypes.Point: 'punkt',
                    QgsWkbTypes.LineString: 'linje'}.get(x, 'yta')
        geom = set_geom(layer.wkbType())

        con = spatialite_connect("{}\{}".format(path, QSettings().value('activeDataBase')))
        cur = con.cursor()

        if self.selectQ.currentText() != 'Vet inte':
            q = self.selectQ.currentText()
            q = q.split(' ')[0]
            cur.execute('SELECT faktor FROM gyf_quality WHERE kvalitet = ?', [q])
        else:
            q = ''
            i = [self.selectQGroup.currentIndex()]
            cur.execute('SELECT faktor FROM gyf_qgroup WHERE id = ?', i)
        f = cur.fetchone()[0]

        data = []
        for i, obj in enumerate(attributes):
            data.append([None, geom, obj[1], obj[0], g, q, f, obj[-1], round(obj[-1]*f,1)])

        cur.executemany('INSERT INTO classification VALUES (?,?,?,?,?,?,?,?,?)', data)
        cur.close()
        con.commit()
        con.close()

        self.showClass()

    def removeQ(self, path):

        ids = self.classtable.selectedItems()
        ids = [i.text() for i in ids] #i.row()
        if len(ids) == 9:
            ids = [ids[-1]]
        else:
            ids = [ids[9 * n-1] for n in range(1, int(len(ids) / 9 + 1))]
        ids = [int(i) for i in ids]

        con = spatialite_connect("{}\{}".format(path, QSettings().value('activeDataBase')))
        cur = con.cursor()

        for i in ids:
            cur.execute('DELETE FROM classification WHERE id = (?);', [i])

        cur.close()
        con.commit()
        con.close()
        self.showClass()

    def showClass(self):
        path = QSettings().value('dataPath')
        self.classtable.clear()
        con = spatialite_connect("{}\{}".format(path, QSettings().value('activeDataBase')))
        cur = con.cursor()

        cur.execute('SELECT * FROM classification')
        data = cur.fetchall()
        data = [list(d[1:-2]) + [int(d[-2]), int(d[-1]), d[0]] for d in data]

        self.classtable.setSortingEnabled(True)
        self.classtable.setColumnCount(9)
        self.classtable.setHorizontalHeaderLabels(["geom", "filnamn", 'id', 'Grupp', 'K', 'F', 'Yta', 'Poäng','uid'])

        if data:
            self.classtable.setRowCount(len(data))
            for i, item in enumerate(data):
                for j, field in enumerate(item):
                    self.classtable.setItem(i, j, QtWidgets.QTableWidgetItem(str(field)))
                    self.classtable.horizontalHeader().setSectionResizeMode(j, QtWidgets.QHeaderView.ResizeToContents)
        else:
            self.classtable.setRowCount(0)

        cur.close()
        con.close()

    def chunks(self, l, n):
        """Yield successive n-sized chunks from l."""
        for i in range(0, len(l), n):
            yield l[i:i + n]

    def lookupFeatures(self, rows, layer, geometry_type):
        features = list(layer.getFeatures())
        matches = []

        for row in rows:
            for feature in features:
                if row[0].text() == geometry_type and int(feature.attribute('id')) == int(row[2].text()):
                    matches.append(feature)

        return matches

    def resetFeatureSelectionLock(self):
        self.feature_selection_lock = False

    def resetRowSelectionLock(self):
        self.row_selection_lock = False

    def highlightFeatures(self):

        if self.row_selection_lock is False:
            selected_items = self.classtable.selectedItems()

            point_layer = QgsProject.instance().mapLayersByName('Punktobjekt')[0]
            line_layer = QgsProject.instance().mapLayersByName('Linjeobjekt')[0]
            polygon_layer = QgsProject.instance().mapLayersByName('Ytobjekt')[0]

            self.feature_selection_lock = True
            timer = Timer()
            timer.setTimeout(self.resetFeatureSelectionLock, 0.1)

            if len(selected_items) > 0:
                selected_range = self.classtable.selectedRanges()[0]

                column_count = selected_range.columnCount()
                selected_rows = list(self.chunks(selected_items, column_count))

                selected_points = self.lookupFeatures(selected_rows, point_layer, 'punkt')
                selected_lines = self.lookupFeatures(selected_rows, line_layer, 'linje')
                selected_polygons = self.lookupFeatures(selected_rows, polygon_layer, 'yta')

                point_layer.selectByIds([point.id() for point in selected_points])
                line_layer.selectByIds([line.id() for line in selected_lines])
                polygon_layer.selectByIds([polygon.id() for polygon in selected_polygons])
            else:
                point_layer.removeSelection()
                line_layer.removeSelection()
                polygon_layer.removeSelection()

    def selectRowByFeatures(self, features, geom_type):

        for feature in features:

            feature_id = feature.attribute("id")

            items = self.classtable.findItems(str(feature_id), Qt.MatchExactly)
            rows = [item.row() for item in items]

            for row in rows:
                geom_name = self.classtable.item(row, 0).text()
                table_fid = int(self.classtable.item(row, 2).text())
                if geom_type == geom_name and table_fid == feature_id:
                    self.classtable.selectRow(row)

    def highlightRows(self):

        point_layer = QgsProject.instance().mapLayersByName('Punktobjekt')[0]
        line_layer = QgsProject.instance().mapLayersByName('Linjeobjekt')[0]
        polygon_layer = QgsProject.instance().mapLayersByName('Ytobjekt')[0]

        selected_points = point_layer.getSelectedFeatures()
        selected_lines = line_layer.getSelectedFeatures()
        selected_polygons = polygon_layer.getSelectedFeatures()

        self.row_selection_lock = True
        timer = Timer()
        timer.setTimeout(self.resetRowSelectionLock, 0.2)

        if self.feature_selection_lock is False and self.tabWidget.currentIndex() == 0:
            self.classtable.clearSelection()
            self.classtable.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
            self.selectRowByFeatures(selected_points, "punkt")
            self.selectRowByFeatures(selected_lines, "linje")
            self.selectRowByFeatures(selected_polygons, "yta")

        self.classtable.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)

    def switchLayerGroups(self):
        self.style = Style()
        if self.tabWidget.currentIndex() == 0:
            self.style.visibility('Kvaliteter', False)
            self.style.visibility('Klassificering', True)
        else:
            self.style.visibility('Kvaliteter', True)
            self.style.visibility('Klassificering', False)


    #RESEARCH_AREA
    def okClicked(self, l, path):
        f = [f for f in l.getFeatures()][0]
        f['yta'] = f.geometry().area()
        l.updateFeature(f)
        l.commitChanges()
        iface.vectorLayerTools().stopEditing(l)
        con = spatialite_connect("{}\{}".format(path, QSettings().value('activeDataBase')))
        con.commit()
        con.close()
        self.window.close()

    def cancelClicked(self, l):
        f = [f for f in l.getFeatures()][0]
        l.deleteFeature(f.id())
        l.triggerRepaint()
        iface.vectorLayerTools().stopEditing(l)
        self.window.close()

    def showSaveDialog(self, l, path):
        self.window = saveRA()
        self.window.show()
        ok = lambda : self.okClicked(l, path)
        cancel = lambda : self.cancelClicked(l)
        self.window.okButton.clicked.connect(ok)
        self.window.cancelButton.clicked.connect(cancel)

    def createArea(self, path):
        l = QgsProject.instance().mapLayersByName('Beräkningsområde')
        if l:
            l = l[0]
            iface.setActiveLayer(l)
            iface.actionToggleEditing().trigger()
            iface.actionAddFeature().trigger()
            showSave = lambda : self.showSaveDialog(l, path)
            l.featureAdded.connect(showSave)

    def selectArea(self):
        for a in iface.attributesToolBar().actions():
            if a.objectName() == 'mActionDeselectAll':
                a.trigger()
                break

        l = QgsProject.instance().mapLayersByName('Beräkningsområde')
        if l:
            l = l[0]
            iface.setActiveLayer(l)
            iface.actionSelect().trigger()


    # Visualization
    def checkGroup(self, checkbox_list):
        views = ['polygon_class', 'line_class', 'point_class']
        view_names =	{
		  'point_class': 'Punktkvalitet',
		  'line_class': 'Linjekvalitet',
		  'polygon_class': 'Ytkvalitet'
		}
        for v in views:
            view = QgsProject.instance().mapLayersByName(view_names[v])
            if view:
                view = view[0]
                unchecked_list = [c.text() for c in checkbox_list if not c.isChecked()]
                unchecked = "', '".join(c for c in unchecked_list)
                query = "SELECT * FROM " + v + " WHERE grupp not in ('" + unchecked + "')"
                view.setSubsetString(query)


    def groupList(self):
        checkboxnames = ['checkBio', 'checkBuller', 'checkVatten', 'checkKlimat', 'checkPoll', 'checkHalsa']
        checkbox_list = [getattr(self, n) for n in checkboxnames]
        for checkbox in checkbox_list:
            checkbox.setChecked(True)

        checkGroup = lambda : self.checkGroup(checkbox_list)
        self.checkBio.stateChanged.connect(checkGroup)
        self.checkBuller.stateChanged.connect(checkGroup)
        self.checkVatten.stateChanged.connect(checkGroup)
        self.checkKlimat.stateChanged.connect(checkGroup)
        self.checkPoll.stateChanged.connect(checkGroup)
        self.checkHalsa.stateChanged.connect(checkGroup)

    def disableGroup(self, path):
        if self.tabWidget.currentIndex() == 1:
            pathLayer = '{}\{}|layername={}'.format(path, QSettings().value('activeDataBase'), 'classification')
            table = QgsVectorLayer(pathLayer, 'classification', "ogr")
            features = table.getFeatures()
            current_groups = []
            for feature in features:
                index = feature.fields().indexFromName("grupp")
                group = feature.attributes()[index]
                current_groups.append(group)
            current_groups = list(set(current_groups))
            checkboxnames = ['checkBio', 'checkBuller', 'checkVatten', 'checkKlimat', 'checkPoll', 'checkHalsa']
            checkbox_list = [getattr(self, n) for n in checkboxnames]
            for checkbox in checkbox_list:
                if checkbox.text() in current_groups:
                    checkbox.setEnabled(True)
                else:
                    checkbox.setEnabled(False)

